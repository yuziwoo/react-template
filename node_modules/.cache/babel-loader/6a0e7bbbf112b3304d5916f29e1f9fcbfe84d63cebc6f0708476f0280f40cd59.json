{"ast":null,"code":"export class JwLibrary {\n  constructor() {\n    this.device = \"\"; // mob, pc\n    this.browser = \"\"; // Chorme, Firefox, Safari, Opera, Edge, Android, iPhone\n\n    let body = document.getElementById(\"root\");\n    this.getBrowser();\n    body.classList.add(`device-${this.device}`); // mob, pc 환경을 구분하여 root element에 class 추가\n    // jw-pc, jw-mob 클래스를 이용하여 원하는 환경에서만 요소가 보일 수 있도록 작성해보세요.\n\n    this.onStart();\n  }\n  getBrowser() {\n    let userAgent = navigator.userAgent;\n    if (userAgent.match(/chrome|chromium|crios/i)) {\n      this.browser = \"Chrome\";\n    } else if (userAgent.match(/firefox|fxios/i)) {\n      this.browser = \"Firefox\";\n    } else if (userAgent.match(/safari/i)) {\n      this.browser = \"Safari\";\n    } else if (userAgent.match(/opr\\//i)) {\n      this.browser = \"Opera\";\n    } else if (userAgent.match(/edg/i)) {\n      this.browser = \"Edge\";\n    } else if (userAgent.match(/android/i)) {\n      this.browser = \"Android\";\n    } else if (userAgent.match(/iphone/i)) {\n      this.browser = \"iPhone\";\n    } else {\n      this.browser = \"Unknown\";\n    }\n    if (userAgent.match(/Android/i) || userAgent.match(/webOS/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPad/i) || userAgent.match(/iPod/i) || userAgent.match(/BlackBerry/i) || userAgent.match(/Windows Phone/i)) {\n      this.device = \"mob\";\n    } else {\n      this.device = \"pc\";\n    }\n  }\n  onStart() {}\n  onEnd() {}\n  cutText(text, limit) {\n    if (text.length <= limit) {\n      return text;\n    } else {\n      return text.slice(0, limit).trim() + \"...\";\n    }\n  }\n}","map":{"version":3,"names":["JwLibrary","constructor","device","browser","body","document","getElementById","getBrowser","classList","add","onStart","userAgent","navigator","match","onEnd","cutText","text","limit","length","slice","trim"],"sources":["/Users/jiwooyoo/Desktop/Works/Project/react-template/src/jw/jw-library.js"],"sourcesContent":["export class JwLibrary {\n    constructor() {\n        this.device = \"\"; // mob, pc\n        this.browser = \"\"; // Chorme, Firefox, Safari, Opera, Edge, Android, iPhone\n\n        let body = document.getElementById(\"root\");\n        this.getBrowser();\n        body.classList.add(`device-${this.device}`); // mob, pc 환경을 구분하여 root element에 class 추가\n        // jw-pc, jw-mob 클래스를 이용하여 원하는 환경에서만 요소가 보일 수 있도록 작성해보세요.\n\n        this.onStart();\n    }\n\n    getBrowser() {\n        let userAgent = navigator.userAgent;\n\n        if (userAgent.match(/chrome|chromium|crios/i)) {\n            this.browser = \"Chrome\";\n        } else if (userAgent.match(/firefox|fxios/i)) {\n            this.browser = \"Firefox\";\n        } else if (userAgent.match(/safari/i)) {\n            this.browser = \"Safari\";\n        } else if (userAgent.match(/opr\\//i)) {\n            this.browser = \"Opera\";\n        } else if (userAgent.match(/edg/i)) {\n            this.browser = \"Edge\";\n        } else if (userAgent.match(/android/i)) {\n            this.browser = \"Android\";\n        } else if (userAgent.match(/iphone/i)) {\n            this.browser = \"iPhone\";\n        } else {\n            this.browser = \"Unknown\";\n        }\n\n        if (userAgent.match(/Android/i) || userAgent.match(/webOS/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPad/i) || userAgent.match(/iPod/i) || userAgent.match(/BlackBerry/i) || userAgent.match(/Windows Phone/i)) {\n            this.device = \"mob\";\n        } else {\n            this.device = \"pc\";\n        }\n    }\n\n    onStart() {\n        \n    }\n\n    onEnd() {\n\n    }\n\n    cutText(text, limit) {\n        if (text.length <= limit) {\n            return text;\n        } else {\n            return text.slice(0, limit).trim() + \"...\";\n        }\n    }\n}\n\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAG,EAAE,CAAC,CAAC;IAClB,IAAI,CAACC,OAAO,GAAG,EAAE,CAAC,CAAC;;IAEnB,IAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;IAC1C,IAAI,CAACC,UAAU,EAAE;IACjBH,IAAI,CAACI,SAAS,CAACC,GAAG,CAAE,UAAS,IAAI,CAACP,MAAO,EAAC,CAAC,CAAC,CAAC;IAC7C;;IAEA,IAAI,CAACQ,OAAO,EAAE;EAClB;EAEAH,UAAUA,CAAA,EAAG;IACT,IAAII,SAAS,GAAGC,SAAS,CAACD,SAAS;IAEnC,IAAIA,SAAS,CAACE,KAAK,CAAC,wBAAwB,CAAC,EAAE;MAC3C,IAAI,CAACV,OAAO,GAAG,QAAQ;IAC3B,CAAC,MAAM,IAAIQ,SAAS,CAACE,KAAK,CAAC,gBAAgB,CAAC,EAAE;MAC1C,IAAI,CAACV,OAAO,GAAG,SAAS;IAC5B,CAAC,MAAM,IAAIQ,SAAS,CAACE,KAAK,CAAC,SAAS,CAAC,EAAE;MACnC,IAAI,CAACV,OAAO,GAAG,QAAQ;IAC3B,CAAC,MAAM,IAAIQ,SAAS,CAACE,KAAK,CAAC,QAAQ,CAAC,EAAE;MAClC,IAAI,CAACV,OAAO,GAAG,OAAO;IAC1B,CAAC,MAAM,IAAIQ,SAAS,CAACE,KAAK,CAAC,MAAM,CAAC,EAAE;MAChC,IAAI,CAACV,OAAO,GAAG,MAAM;IACzB,CAAC,MAAM,IAAIQ,SAAS,CAACE,KAAK,CAAC,UAAU,CAAC,EAAE;MACpC,IAAI,CAACV,OAAO,GAAG,SAAS;IAC5B,CAAC,MAAM,IAAIQ,SAAS,CAACE,KAAK,CAAC,SAAS,CAAC,EAAE;MACnC,IAAI,CAACV,OAAO,GAAG,QAAQ;IAC3B,CAAC,MAAM;MACH,IAAI,CAACA,OAAO,GAAG,SAAS;IAC5B;IAEA,IAAIQ,SAAS,CAACE,KAAK,CAAC,UAAU,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,QAAQ,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,SAAS,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,OAAO,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,OAAO,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,aAAa,CAAC,IAAIF,SAAS,CAACE,KAAK,CAAC,gBAAgB,CAAC,EAAE;MACvN,IAAI,CAACX,MAAM,GAAG,KAAK;IACvB,CAAC,MAAM;MACH,IAAI,CAACA,MAAM,GAAG,IAAI;IACtB;EACJ;EAEAQ,OAAOA,CAAA,EAAG,CAEV;EAEAI,KAAKA,CAAA,EAAG,CAER;EAEAC,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACjB,IAAID,IAAI,CAACE,MAAM,IAAID,KAAK,EAAE;MACtB,OAAOD,IAAI;IACf,CAAC,MAAM;MACH,OAAOA,IAAI,CAACG,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC,CAACG,IAAI,EAAE,GAAG,KAAK;IAC9C;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}